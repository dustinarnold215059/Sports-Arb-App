// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  username           String    @unique
  email              String    @unique
  passwordHash       String    // Renamed from 'password' to be explicit about hashing
  role               String    @default("basic") // basic, premium, pro, admin
  subscriptionStatus String    @default("inactive") // active, inactive, cancelled
  subscriptionExpiry DateTime?
  apiRequestsUsed    Int       @default(0)
  apiRequestsLimit   Int       @default(100)
  isActive           Boolean   @default(true)
  isLocked           Boolean   @default(false)
  failedLoginAttempts Int      @default(0)
  lastFailedLogin    DateTime?
  twoFactorEnabled   Boolean   @default(false)
  twoFactorSecret    String?
  emailVerified      Boolean   @default(false)
  emailVerifyToken   String?
  resetPasswordToken String?
  resetPasswordExpiry DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastActivity       DateTime  @default(now())
  
  // Relations
  bets               Bet[]
  portfolios         Portfolio[]
  sessions           UserSession[]
  
  @@index([email])
  @@index([username])
  @@index([isActive, isLocked])
  @@map("users")
}

model Bet {
  id                String    @id @default(cuid())
  userId            String
  game              String
  bookmaker         String
  betType           String
  odds              String
  stake             Float
  potentialWin      Float
  status            String    @default("pending") // pending, won, lost, void
  profit            Float?
  timestamp         DateTime  @default(now())
  arbitrageGroup    String?
  sport             String?
  league            String?
  homeTeam          String?
  awayTeam          String?
  commenceTime      DateTime?
  notes             String?
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("bets")
}

model Portfolio {
  id                    String   @id @default(cuid())
  userId                String
  netProfit             Float    @default(0)
  totalStaked           Float    @default(0)
  totalBets             Int      @default(0)
  winningBets           Int      @default(0)
  losingBets            Int      @default(0)
  pendingBets           Int      @default(0)
  winRate               Float    @default(0)
  profitRate            Float    @default(0)
  arbitrageGroups       Int      @default(0)
  arbitrageSuccessRate  Float    @default(0)
  lastUpdated           DateTime @default(now())
  
  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
  @@map("portfolios")
}

model ApiCache {
  id        String   @id @default(cuid())
  key       String   @unique
  data      Json
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("api_cache")
}

model SystemMetrics {
  id          String   @id @default(cuid())
  metricName  String
  metricValue Float
  metadata    Json?
  timestamp   DateTime @default(now())
  
  @@index([metricName, timestamp])
  @@map("system_metrics")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())
  
  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
  @@map("user_sessions")
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(1)
  resetTime DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([key])
  @@index([resetTime])
  @@map("rate_limits")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("audit_logs")
}

model AppSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isPublic    Boolean  @default(false)
  updatedAt   DateTime @updatedAt
  updatedBy   String?
  
  @@map("app_settings")
}